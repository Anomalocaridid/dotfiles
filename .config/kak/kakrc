# Add line numbers
add-highlighter global/ number-lines -hlcursor

# Highlight matching characters
add-highlighter global/ show-matching

# Get rid of Clippy and don't set terminal window title
set-option global ui_options ncurses_assistant=none ncurses_set_title=false

# Tabs are 4 characters long
set-option global tabstop 4
set-option global indentwidth 4

# But Lisp has 2 character tabs
hook global WinSetOption filetype=(lisp) %{
	set-option window tabstop 2
	set-option window indentwidth 2
}

# Format shell scripts on save
# (No LSP server to format it)
hook global WinSetOption filetype=sh %{
	set-option window formatcmd "shfmt -ci -sr"
	hook buffer BufWritePre .* format
}

# Math prompt powered by Qalculate!
map global normal = ': prompt math: %{exec "a%val{text}<lt>esc> | qalc -t +u8 -f -<lt>ret>"}<ret>'

# Toggle visible whitespace
define-command whitespace-toggle %{
	try %{
		add-highlighter global/ show-whitespaces
	} catch %{
		remove-highlighter global/show-whitespaces
	}
}

map global user w ": whitespace-toggle<ret>" -docstring "toggle whitespace"

# Ensure that plug.kak is installed.
# If not, install it.
nop %sh{
	if [ ! -d $kak_config/plugins/plug.kak ]; then
		mkdir -p "$kak_config/plugins"
		git clone https://github.com/robertmeta/plug.kak.git "$kak_config/plugins/plug.kak"
	fi
}

# Source plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "robertmeta/plug.kak" noload

plug "ul/kak-lsp" do %{
	cargo install --locked --force --path .
} config %{
	# Cool unicode indicators
	set-option global lsp_diagnostic_line_error_sign "‚úñ"
	set-option global lsp_diagnostic_line_warning_sign "‚û§"

	hook global WinSetOption filetype=(c|haskell|rust) %{
		# Enable lsp
		lsp-enable

		# Format before saving
		hook buffer BufWritePre .* lsp-formatting-sync
		
		# Highlight errors in code
		lsp-inline-diagnostics-enable window

		# lsp user mode
		map global user l ": enter-user-mode lsp<ret>" -docstring "LSP"
	}
}

plug "screwtapello/kakoune-shellcheck" domain "gitlab.com" config %{

	# Create shellcheck mode with mappings that resemble the lsp mode
	declare-user-mode shellcheck
	map global shellcheck l ": lint<ret>" -docstring "lint buffer"
	map global shellcheck n ": lint-next-message<ret>" -docstring "find next error"
	map global shellcheck p ": lint-previous-message<ret>" -docstring "find previous error"
	map global shellcheck e ": buffer *lint-output*<ret>" -docstring "list buffer errors and warnings"
		
	hook global WinSetOption filetype=(sh|kak) %{
		map global user l ": enter-user-mode shellcheck<ret>" -docstring "shellcheck"
	}
}

plug "eraserhd/parinfer-rust" do %{
	cargo install --force --path .
	cargo clean
} config %{
	hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
		parinfer-enable-window -smart
	}
}

# Automatic tab handling
# No longer maintained
plug "andreyorst/smarttab.kak" defer smarttab %{
	set-option global softtabstop 4
} config %{
	hook global WinSetOption filetype=(kak|sh|plain) smarttab
   
	hook global WinSetOption filetype=(c|haskell|rust|yaml|lisp) expandtab
}

# Highlight current line and/or current column
plug "insipx/kak-crosshairs" config %{
	crosshairs
}

# File tree navigator
# No longer maintained
plug "andreyorst/kaktree" defer kaktree %{
	set-option global kaktree_double_click_duration "0.5"
	set-option global kaktree_indentation 1
	set-option global kaktree_dir_icon_open  "‚ñæ üóÅ "
	set-option global kaktree_dir_icon_close "‚ñ∏ üóÄ "
	set-option global kaktree_file_icon      "‚†Ä‚†Äüñ∫"
} config %{
	hook global WinSetOption filetype=kaktree %{
		remove-highlighter buffer/numbers
		remove-highlighter buffer/matching
		remove-highlighter buffer/wrap
		remove-highlighter buffer/show-whitespaces
	}#
	kaktree-enable
	map global user t ": kaktree-toggle<ret>" -docstring "kaktree"
}

# Escape arguments so that they can be passed to Kakoune
# Required by auto-pairs.kak
plug "alexherbo2/prelude.kak"

# Pairing parentheses and brackets
plug "alexherbo2/auto-pairs.kak" %{
	require-module auto-pairs
	#default
	#set-option window "(" ")" "{" "}" "[" "]" '"' '"' "'" "'" "`" "`" "‚Äú" "‚Äù" "‚Äò" "‚Äô" "¬´" "¬ª" "‚Äπ" "‚Ä∫"

	# No single quotes
	hook global WinSetOption filetype=(haskell|rust) %{
		set-option window auto_pairs "(" ")" "{" "}" "[" "]" '"' '"' "`" "`" "‚Äú" "‚Äù" "‚Äò" "‚Äô" "¬´" "¬ª" "‚Äπ" "‚Ä∫"
	}

	# No single quotes or backticks
	hook global WinSetOption filetype=(lisp) %{
		set-option window auto_pairs "(" ")" "{" "}" "[" "]" '"' '"' "‚Äú" "‚Äù" "‚Äò" "‚Äô" "¬´" "¬ª" "‚Äπ" "‚Ä∫"
	}

	auto-pairs-enable
}

# Highlight recursive pairs of parentheses centered from cursor
plug "Bodhizafa/kak-rainbow" config %{
	hook global WinSetOption filetype=(.*) rainbow-enable-window
}

# Search highlighter
plug "alexherbo2/search-highlighter.kak"

# fzf integration
# No longer maintained
plug "andreyorst/fzf.kak" config %{
	map global user f ": fzf-mode<ret>" -docstring "fzf"
}

# Easy navigation of open buffers
plug "delapouite/kakoune-buffers" config %{
	# Buffer user mode
	map global user b ": enter-buffers-mode<ret>" -docstring "buffers"
	map global user B ": enter-user-mode -lock buffers<ret>" -docstring "buffers (lock)"
}

# Preview faces in a colorscheme
plug "delapouite/kakoune-palette"

# Enhanced selections
plug "delapouite/kakoune-auto-percent"

# Enhanced searches
plug "delapouite/kakoune-auto-star"

# Manual indentation
plug "alexherbo2/manual-indent.kak" config %{
	require-module manual-indent

	hook global WinCreate .* %{
		manual-indent-enable
	}

	hook global WinSetOption filetype=lisp %{
		manual-indent-remove-filetype-hooks
	}
}

# Symmetrically grow/shrink horizontlly.
plug "delapouite/kakoune-mirror" config %{
	map global user m ": enter-user-mode -lock mirror<ret>" -docstring "Enter mirror mode"
}

# Selects all adjacent lines that match the current selection
plug "occivink/kakoune-vertical-selection"

# Enhances text objects
# Depends on kakoune-vertical-selection
plug "delapouite/kakoune-text-objects" %{
	text-object-map
}

# Roguelike-style light simulation
plug "occivink/kakoune-roguelight" config %{
	define-command roguelight-toggle %{
		try %{
			crosshairs
			roguelight-enable
		} catch %{
			roguelight-disable
		}

		hook -group roguelight window RawKey .* roguelight-refresh
	}

	define-command roguelight-map %{
		edit -readonly "%val{config}/plugins/kakoune-roguelight/map"
		roguelight-toggle
	}
}

# Smooth scrolling
plug "caksoylar/kakoune-smooth-scroll" config %{
	# Automatically enable for every window
	hook global WinCreate .* %{
		hook -once window WinDisplay .* smooth-scroll-enable
	}

	# Default mapping conflicts with text-objects
	set-option global scroll_keys_object
}

# Easy navigation
plug "danr/kakoune-easymotion" config %{
	map global user e ": enter-user-mode easymotion<ret>" -docstring "easymotion"
}

# Discord presence
plug "ABuffSeagull/kakoune-discord" do %{
	cargo install --path . --force
} config %{
	discord-presence-enable
}

# My custom colorscheme
# Keep at bottom so that it overwrites supported plugins' custom faces
plug "DERPSQUID9/kakoune-cyberpunk-neon" theme config %{
	colorscheme cyberpunk-neon
}

# Powerline Bar
# Keep below colorscheme so it can use its powerline theme module
plug "jdugan6240/powerline.kak" defer powerline %{
	set-option global powerline_shorten_bufname short

	# Use my custom powerline theme
	powerline-theme cyberpunk-neon

	# Default layout
	#set-option global powerline_format "git bufname line-column mode-info filetype client session position"
} config %{
	powerline-start
}
