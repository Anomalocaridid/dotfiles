#!/usr/bin/env bash

# .config/yadm/bootstrap
# Bootstrap script intended to automate setting up a new hyper-personalized system
# WARNING: Only tested with EndeavourOS. May still work with other Arch derivatives, but NOT guaranteed.

# Helper functions

step() {
	printf "\e[1m%s\e[0m\n" "$1"
}

success() {
	printf "\e[1;32m%s\e[0m\n\n" "$1"
}

error() {
	printf "\e[1;31mError: %s\e[0m\n" "$1"
	exit 1
}

# Initialize submodules
step "Cloning submodules"

if yadm submodule update --recursive --init &> /dev/null; then
	success "Successfully cloned submodules"
else
	error "Could not clone submodules"
fi

# Dependencies for my setup for various programs
# Intended to be redundant so I don't have to consider if other programs
# already rely on something before adding or removing it.

# Dependencies for zsh config
readonly zsh_deps=(
	"bat"
	"bat-extras-git"
	# "dust" # Has to be installed after rustup is configured.
	"exa"
	"fd"
	"fzf"
	"lolcat"
	"otf-nerd-fonts-fira-code"
	"pkgfile"
	"ripgrep" # Required by bat-extras-git
	"ranger"
	"toilet"
	"toilet-fonts" # Required by toilet
	"wezterm"
	# "zoxide" # Has to be installed after rustup is configured.
	"zsh"
)

readonly python_dev=(
	"flake8"
	"python"
	"python-language-server"
	"yapf"
)

readonly haskell_dev=(
	"cabal-install"
	"ghc"
	"haskell-language-server"
	"haskell-ormolu"
	"hlint"
	"stack"
)

readonly bash_dev=(
	"shellcheck"
	"shfmt"
)

readonly common_lisp_dev=(
	"clisp"
	"sbcl"
)

# Dependencies for Kakoune setup
readonly kak_deps=(
	"${bash_dev[@]}"
	"${common_lisp_dev[@]}"
	"${haskell_dev[@]}"
	"${python_dev[@]}"
	"clang" # For C development
	"fzf"
	"kakoune"
	"rustup" # For Rust development
)

# Dependencies for ClamAV setup
readonly clamav_deps=(
	"clamav"
	"python-fangfrisch"
)

# Dependencies for QEMU/KVM setup
readonly vm_deps=(
	"bridge-utils"
	"dnsmasq"
	"iptables-nft"
	"openbsd-netcat"
	"qemu"
	"vde2"
	"virt-manager"
)

# Programs for gaming
readonly games=(
	"gdlauncher-bin"
	"itch"
	"lutris"
	"pulseaudio-alsa" # Required for runelite
	"runelite"
	"steam"
	"wine"
	"wine-gecko"
	"wine-mono"
)

# Productivity software
readonly productivity=(
	"gnuplot" # Required by qalculate-gtk
	"joplin-desktop"
	"libreoffice-fresh"
	"qalculate-gtk"
	"waterfox-g3-bin"
)

# File sync programs
readonly sync=(
	"megasync-bin"
	"syncthing"
	"syncthingtray" # Tray icon for syncthing
)

# Security-oriented software
readonly security=(
	"keepassxc"
	"yubioath-desktop"
)

# Miscellaneous programs that I frequently use
readonly misc=(
	"${clamav_deps[@]}"
	"${games[@]}"
	"${productivity[@]}"
	"${security[@]}"
	"${sync[@]}"
	"${vm_deps[@]}"
	"betterdiscord-installer"
	"breeze-hacked-cursor-theme"
	"cht.sh-git"
	"discord"
	"exercism-bin"
	"freetube-bin"
	"moreutils"
	"strawberry"
	# "tealdeer" # Has to be installed after rustup is configured.
)

# Install programs with yay
step "Installing packages"
if yay -Syu --needed --answerclean None $(echo "${zsh_deps[*]} ${kak_deps[*]} ${misc[*]}" | sort | uniq); then
	success "Successfully installed packages"
else
	error "Could not install packages"
fi

# Configure rustup
step "Installing Rust with rustup"
if rustup default stable &> /dev/null; then
	success "Successfully installed Rust"
else
	error "Could not install Rust"
fi

step "Configuring Rust with rustup"
if rustup component add rls rust-analysis rust-src &> /dev/null; then
	success "Successfully configured Rust"
else
	error "Could not configure Rust"
fi

# Install packages that require rustup
step "Installing packages that depend on Rust"
if yay -S --needed --answerclean None dust zoxide tealdeer; then
	success "Successfully installed packages"
else
	error "Could not install packages"
fi

# Switch user's default shell to zsh
step "Changing user's shell to zsh"
if chsh -s "$(which zsh)"; then
	success "Successfully set $USER's shell to zsh"
else
	error "Could not set $USER's shell to zsh"
fi

# Configure ClamAV and add Fangfrisch signatures
step "Initializing ClamAV database"
if sudo freshclam &> /dev/null; then
	success "Successfully initialized ClamAV"
else
	error "Could not initialize ClamAV"
fi

step "Initializing Fangfrisch database"
if sudo -u clamav /usr/bin/fangfrisch --conf /etc/fangfrisch/fangfrisch.conf initdb; then
	success "Successfully initialized Fangfrisch"
else
	error "Could not initialize Fangfrisch"
fi

# Test ClamAV configuration
readonly eicar_test_file_url="https://secure.eicar.org/eicar.com.txt"
readonly target="stdin: Win.Test.EICAR_HDB-1 FOUND"

step "Testing ClamAV config with EICAR test file"
if curl "$eicar_test_file_url" 2> /dev/null | clamscan - | grep "$target" &> /dev/null; then
	success "Test succeeded"
else
	error "Test failed"
fi

# Configure QEMU/KVM Setup
# Uncomment unix_sock_group and unix_sock_rw_perms in libvirtd.conf
step "Configuring libvirt"
if sudo sed -E -i "/^#unix_sock_(group|rw_perms)/ s/^#//" /etc/libvirt/libvirtd.conf; then
	success "Successfully configured libvirt"
else
	error "Could not configure libvirt"
fi

step "Adding $USER to libvirt group"
if sudo usermod -a -G libvirt "$USER"; then
	success "Successfully added $USER to libvirt group"
else
	error "Could not add $USER to libvirt group"
fi

# Enable nested virtualization
step "Enabling KVM nested virtualization"
if echo "options kvm-intel nested=1" | sudo tee /etc/modprobe.d/kvm-intel.conf > /dev/null; then
	success "Successfully enabled KVM nested virtualization"
else
	error "Could not enable KVM nested virtualization"
fi

# Enable important services
readonly services=(
	"clamav-daemon.service"    # ClamAV automatic scan dawmon
	"clamav-freshclam.service" # Update ClamAV official signatures
	"fangfrisch.timer"         # Update fangfrisch signatures
	"libvirtd.service"         # KVM libvirt service
	"pcscd"                    # Required for yubioauth-desktop
	"pkgfile-update.timer"     # Update pkgfile cache
)

step "Enabling important services"
for service in "${services[@]}"; do
	if sudo systemctl enable "$service" &> /dev/null; then
		success "Successfully enabled service: $service"
	else
		error "Could not enable service: $service"
	fi
done

# Enable Syncthing user service
if systemctl --user enable syncthing.service &> /dev/null; then
	success "Successfully enabled user service: syncthing.service"
else
	error "Could not enable user service: syncthing.service"
fi

# Update pkgfile cache
step "Updating pkgfile cache"
if sudo pkgfile --update &> /dev/null; then
	success "Successfully updated pkgfile cache"
else
	error "Could not update pkgfile cache"
fi

# Update tldr cache
step "Updating tldr cache"
if tldr --update &> /dev/null; then
	success "Successfully updated tldr cache"
else
	error "Could not update tldr cache"
fi

# Build bat theme cache
step "Building bat cache"
if bat cache --build &> /dev/null; then
	success "Successfully built bat cache"
else
	error "Could not build bat cache"
fi

# Initialize QMK
readonly qmk_repo="https://github.com/anomalocaridid/qmk_firmware.git"

step "Cloning personal QMK fork"
if git clone "$qmk_repo" --recurse-submodules &> /dev/null; then
	success "Successfully cloned personal QMK fork"
else
	error "Could not clone personal QMK fork"
fi

PATH=$PATH:"$HOME/.local/bin"
step "Installing QMK"
if python3 -m pip install --user qmk &> /dev/null; then
	success "Successfully installed QMK"
else
	error "Could not install QMK"
fi

step "Setting up QMK udev rules"
if sudo cp "$HOME/qmk_firmware/util/udev/50-qmk.rules" /etc/udev/rules.d; then
	success "Successfully set up QMK udev rules"
else
	error "Could not set up QMK udev rules"
fi

step "Initializing QMK"
if qmk setup; then
	success "Successfully initialized QMK"
else
	error "Could not initialize QMK"
fi

# Add avr-gcc to IgnorePkg in pacman.conf, as qmk only works with a certain version
step "Adding avr-gcc to IgnorePkg in pacman.conf"
if sudo sed -i "/^#IgnorePkg/ {s/$/ avr-gcc/; s/^#//}" /etc/pacman.conf; then
	success "Successfully added avr-gcc to IgnorePkg"
else
	error "Could not add avr-gcc to IgnorePkg"
fi

# Add upstream QMK repo as remote
readonly upstream_qmk_repo="https://github.com/qmk/qmk_firmware.git"

step "Adding upstream QMK repo as remote"
if git -C qmk_firmware remote add upstream "$upstream_qmk_repo" &> /dev/null; then
	success "Successfully added upstream QMK repo as remote"
else
	error "Could not add upstream QMK repo as remote"
fi

# Set cursor theme in default theme
readonly default_cursor_theme="/usr/share/icons/default/index.theme"

step "Setting cursor theme"
if sudo sed -i "s/Adwaita/Breeze_Hacked/" "$default_cursor_theme"; then
	success "Successfully set cursor in $default_cursor_theme"
else
	error "Could not set cursor in $default_cursor_theme"
fi

# Download color scheme to GTK system theme directory
readonly color_scheme_url="https://raw.githubusercontent.com/Roboron3042/Cyberpunk-Neon/master/gtk/materia-cyberpunk-neon.tar.gz"
readonly color_scheme_dir="/usr/share/themes/"

step "Downloading GTK color scheme"
if sudo mkdir -p "$color_scheme_dir"; then
	if curl "$color_scheme_url" 2> /dev/null | sudo tar xzf --directory="$color_scheme_dir" &> /dev/null; then
		success "Successfully downloaded GTK color scheme"
	else
		error "Could not download GTK color scheme"
	fi
else
	error "Could not create folder at $color_scheme_dir"
fi

# Install and configure icon theme
readonly icon_theme_url="https://raw.githubusercontent.com/gusbemacbe/suru-plus-aspromauros/master/install.sh"
readonly icon_themes_dir="/usr/share/icons"

step "Installing icon theme"
if wget -qO- "$icon_theme_url" | sh &> /dev/null; then
	if sudo mv "$icon_themes_dir/Suru++-Aspr√≥mauros" "$icon_themes_dir/Suru++"; then
		success "Successfully installed icon theme"
	else
		error "Could not rename icon theme folder"
	fi
else
	error "Could not install icon theme"
fi

step "Installing suru-plus-colourize"
if sudo wget https://git.io/fhbxw --output-document="/usr/local/bin/suru-plus-colourise"; then
	if sudo chmod a+x /usr/local/bin/suru-plus-colourise; then
		success "Successfully installed suru-plus-colourise"
	else
		error "Could not install suru-plus-colourise"
	fi
else
	error "Could not install suru-plus-colourise"
fi

step "Recoloring icon theme"
if sudo suru-plus-colourise; then
	success "Recolored icon theme"
else
	error "Could not recolor icon theme"
fi

# Install GRUB theme
# TODO: Find permalink to grub theme archive
# readonly grub_theme_url=""

# readonly grub_theme_file="/tmp/CyberRe.tar.gz"
# wget "$grub_theme_url" --output-document "$grub_theme_file"
# tar xf "$grub_theme_file" --directory=/tmp
# cd "/tmp/CyberRe 1.0.0"
# ./install.sh
# cd

# Prompt instructions for remaining manual setup
\cat <<- EOL
	##### Automated Setup Complete #####
	Further manual setup to do:
	- Reboot the system
	- Set color scheme
	- Set icon theme
	- Set cursor theme
	- Install GRUB theme
	- Set up sync services
	- Log into any necessary services
	- Install any desired games
EOL
