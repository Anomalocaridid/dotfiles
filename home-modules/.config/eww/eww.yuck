(defvar TERM_CMD "handlr launch x-scheme-handler/terminal --")
(defvar EXEC_CMD "hyprctl dispatch exec --")

(defwindow bar
  :monitor 0
  :exclusive true 
  :geometry (geometry :x "0%"
                      :y "2%"
                      :width "97%"
                      :height "3%"
                      :anchor "top center")
  (bar))

(defwidget bar []
  (centerbox 
    (left-bar)
    (mid-bar)
    (right-bar)))

(defwidget left-bar []
  (box :class "left-bar"
       :space-evenly false
       (workspaces)
       (left-sep)
       (active-window)
       (left-sep)))

(defwidget mid-bar []
  (box :class "mid-bar"
       :space-evenly false
       :halign "center"
       (right-sep :reveal {music != ""})
       (music)
       (left-sep :reveal {music != ""})))

(defwidget right-bar []
  (box :class "right-bar"
       :space-evenly false
       :halign "end"
       (right-sep)
       (controls)
       (right-sep)
       (statistics)
       (right-sep)
       (systray)
       (right-sep)
       (time)))

(defwidget sep [text reveal]
  (label :class "sep"
         :text {(reveal ?: true) ? text : ""}))

(defwidget left-sep [?reveal]
  (sep :text ""
       :reveal reveal))

(defwidget right-sep [?reveal]
  (sep :text ""
       :reveal reveal))

(defwindow calendar
  :monitor 0
  :stacking "overlay"
  :geometry (geometry :x "1.5%"
                      :y "1%"
                      :width "20%"
                      :height "10%"
                      :anchor "top right")
  (box :class "bar"
       (calendar)))

(defpoll timestamp :interval "1s"
  "date +%s")

(defvar military-time false)

(defwidget time []
  (eventbox :onclick "${EWW_CMD} open --toggle calendar"
            :onrightclick "${EWW_CMD} update military-time=${!military-time}"
            ; :spacing 5
            :tooltip {formattime(timestamp, "  %b %d, %Y")}
            {formattime(timestamp, "󰅐 ${military-time ? "%T" : "%r"}")}))

(deflisten workspaces :initial "[]" "~/.config/eww/scripts/get-workspaces.sh")
(deflisten current-workspace :initial "1" "~/.config/eww/scripts/get-active-workspace.sh")

(defwidget workspaces []
  (eventbox :onscroll "${EWW_CONFIG_DIR}/scripts/change-active-workspace.sh {} ${current-workspace}"
            :class "workspaces-widget"
    (box :space-evenly false
      (label :text "${workspaces}${current-workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick { workspace.id >= 0 ? "hyprctl dispatch workspace ${workspace.id}" : ""}
          (box :class "workspace-entry ${workspace.id == current-workspace ? "current" : ""}"
            (label :markup {workspace.name})))))))

(deflisten active-window "~/.config/eww/scripts/get-window-title.sh")

(defwidget active-window []
  (label :text " ${active-window ?: "..."}"
         :limit-width 15
         :tooltip active-window))

(defwindow music
  :monitor 0
  :stacking "overlay"
  :geometry (geometry :x "0%"
                      :y "1%"
                      :anchor "top center")
  (music-popup))

(deflisten music
  'playerctl --follow metadata --format \'{"artist": "{{artist}}", "title": "{{title}}", "album": "{{album}}", "position": "{{position}}", "position_hr": "{{duration(position)}}", "length": "{{mpris:length}}", "length_hr": "{{duration(mpris:length)}}"\'}')
  
; Get album art separately or else it will be downloaded once every second
; rather than only downloading once per song
(deflisten album-art
  "~/.config/eww/scripts/album-art.sh")

(defwidget music-popup []
    (box :class "bar"
         :space-evenly false
         :spacing 10
    (image :path album-art
           :image-width 100
           :image-height 100)
      (box :orientation "vertical"
           :valign "center"
        (label :class "music-title"
               :text {music.title}
               :limit-width 30)
        (label :class "music-artist"
               :text {music.artist}
               :limit-width 30)
        (label :class "music-album"
               :text {music.album}
               :limit-width 30)
        (scale :value {music.position}
               :min 0
               :max {music.length})
        (label :class "music-position"
               :text "${music.position_hr} / ${music.length_hr}"))))

(defvar show-music false)

(defwidget music []
  (interactive :reveal show-music
               :onhover "${EWW_CMD} update show-music=true"
               :onhoverlost "${EWW_CMD} update show-music=false"
               :onclick "${EWW_CMD} open --toggle music"
               :tooltip "${music.position_hr} / ${music.length_hr}"
               :class "music"
               :transition "slideright"
               (music-info :text " ")
               (music-info :text "${music.artist} - ")
               (label :text {music != "" ? music.title : ""}
                      :limit-width 30)))

; Don't use label and :visible here or else it breaks when passing artist string
(defwidget music-info [text]
  {music != "" ? text : ""})
    
(defwidget controls []
  (box :space-evenly false
       :spacing 5
       (volume)
       (network)))

(defpoll volume :interval "1s"
  "wpctl get-volume @DEFAULT_AUDIO_SINK@ | cut --delimiter=' ' --fields=2")

(defvar show-volume false)

(defwidget volume []
  (interactive :reveal show-volume
               :onhover "${EWW_CMD} update show-volume=true"
               :onhoverlost "${EWW_CMD} update show-volume=false"
               :onrightclick "${EXEC_CMD} pavucontrol"
               "${volume == 0 ? "󰝟" :
                  volume <= 0.33 ? "󰕿" : 
                  volume <= 0.66 ? "󰖀" :
                  "󰕾"} ${volume * 100}%"
               (scale :min 0
                      :max 101
                      :active true
                      :value {volume * 100}
                      :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%")
               ""))

(defpoll network :interval "1s"
  "~/.config/eww/scripts/network-info.sh")

(defvar show-network false)

(defwidget network []
  (interactive :reveal show-network
               :onhover "${EWW_CMD} update show-network=true"
               :onhoverlost "${EWW_CMD} update show-network=false"
               :onclick "${TERM_CMD} --class nmtui nmtui"
               :onrightclick "nmcli connection down wg0 || nmcli connection up wg0"
               :class "network ${!network.connected ? "disconnected" : ""}"
               :spacing 3
               :tooltip "󰓅 ${network.rate}"
               "${network.icon} "
               "${network.name}"
               ""))

(defvar show-memory false)
(defvar show-cpu false)
(defvar show-disk false)
(defvar show-temperature false)

; TODO: After getting laptop, make stat for battery with critical <= 15, urgent <= 30;
(defwidget statistics []
  (box :class "statistics"
       :space-evenly false
       :spacing 5
    ; TODO: Show totals on click
    (percent :class "memory"
             :label "󰍛"
             :value {EWW_RAM.used_mem_perc}
             :reveal-graph show-memory)
    ; TODO: Show all cores on click
    (percent :class "cpu"
             :label "󰘚"
             :value {EWW_CPU.avg}
             ; :value {jq(EWW_CPU.cores, "[.[].usage] | add / length")}
             :reveal-graph show-cpu)
    ; TODO: Show used and free on click
    (percent :class "disk"
             :label "󰋊"
             :value {EWW_DISK["/persist"].used_perc}
             :reveal-graph show-disk)
    ; TODO: Show all temps and which one is being shown on bar on click
    (stat :class "temperature"
          :label ""
          :value {round(EWW_TEMPS.AMDGPU_EDGE, 0)}
          :unit "°C"
          :urgent 60
          :critical 75
          :min-graph 30
          :max-graph 90
          :reveal-graph show-temperature)))

(defwidget percent [class label value reveal-graph]
  (stat :class class
        :label label
        :value {round(value, 0)}
        :unit "%"
        :urgent 70
        :critical 90
        :min-graph 0
        :max-graph 100
        :reveal-graph reveal-graph))

(defwidget stat
  [class
   label
   value
   unit
   urgent
   critical
   min-graph
   max-graph
   reveal-graph]
  (interactive :reveal reveal-graph
               :onhover "${EWW_CMD} update show-${class}=true"
               :onhoverlost "${EWW_CMD} update show-${class}=false"
               :class "stat ${class} ${value >= critical ? "critical" : value >= urgent ? "urgent" : ""}"
               "${label} ${value}${unit}"
               (graph :value value
                      :time-range "60s"
                      :width 30
                      :min min-graph
                      :max max-graph
                      :dynamic true
                      :line-style "round")
               ""))

(defwidget interactive 
  [reveal
   ?onhover
   ?onhoverlost
   ?onclick
   ?onrightclick
   ?tooltip
   ?class
   ?transition]
  (eventbox :onhover onhover
            :onhoverlost onhoverlost
            :onclick onclick
            :onrightclick onrightclick
            :tooltip tooltip
    (box :class class
         :space-evenly false
         (children :nth 0)
         (revealer :transition {transition ?: "slideleft"}
                   :reveal reveal
                   :duration "350ms"
                   (children :nth 1))
         (children :nth 2))))
